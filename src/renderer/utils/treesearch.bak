<script lang="ts">

function SearchRoot(val: string, list: TreeNodeData[]) {
  let result: TreeNodeData[] = []
  if (list.length == 0) return result
  for (let i = 0, maxi = list.length; i < maxi; i++) {
    let item = list[i]
    let add: TreeNodeData = {
      __v_skip: true,
      key: item.key,
      title: item.title,
      namesearch: item.namesearch,
      children: [],
      icon: item.icon,
      isLeaf: item.isLeaf
    }
    if (item.children.length > 0) add.children = SearchNode(val, item.children) 
    result.push(add)
  }
  return result
}

function SearchNode(val: string, list: TreeNodeData[]): TreeNodeData[] {
  let result: TreeNodeData[] = []
  if (list.length == 0) return result

  let findmap = new Set()
  let results = fuzzysort.go(val, list, {
    threshold: -10000,
    keys: ['title', 'namesearch'],
    scoreFn: (a) => Math.max(a[0] ? a[0].score : -10000, a[1] ? a[1].score : -10000)
  })
  for (let i = 0, maxi = results.length; i < maxi; i++) {
    if (results[i].score > -10000) findmap.add(results[i].obj.key)
  }

  for (let i = 0, maxi = list.length; i < maxi; i++) {
    let item = list[i]
    let add: TreeNodeData = {
      __v_skip: true,
      key: item.key,
      title: item.title,
      namesearch: item.namesearch,
      children: [],
      icon: item.icon,
      isLeaf: item.isLeaf
    }
    if (item.children.length > 0) add.children = SearchNode(val, item.children) 
    add.isLeaf = item.children.length == 0
    if (findmap.has(add.key) || add.children.length > 0) result.push(add) 
  }

  return result
}
</script>